<?php

namespace Tests\Feature;

use Tests\TestCase;
use App\Models\User;
use App\Models\Reward;
use Illuminate\Http\UploadedFile;
use Database\Seeders\RolesSeeder;
use Database\Seeders\RoleUserSeeder;
use Database\Seeders\UsersTableSeeder;
use Database\Seeders\rewards_table_seeder;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\Mailer\Transport\Dsn;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class RewardControllerTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_reward_can_be_created()
    {
        $this->seed(UsersTableSeeder::class);
        $this->seed(RolesSeeder::class);
        $this->seed(RoleUserSeeder::class);
        
        Storage::fake('file');

        $file = UploadedFile::fake()->image('test.jpg');
        
        $rewardData = [
            'reward' => 'Test Reward',
            'pointvalue' => 10,
            'file' => $file
        ];

        // User is generated by the seeder
        $user = User::find(1);
        
        $response = $this->actingAs($user)->postJson('/api/rewards', $rewardData);

        $response->assertStatus(200);
    }

    public function test_reward_can_be_updated()
    {
        $this->seed(UsersTableSeeder::class);
        $this->seed(RolesSeeder::class);
        $this->seed(RoleUserSeeder::class);
        $this->seed(rewards_table_seeder::class);
        
        Storage::fake('file');

        $file = UploadedFile::fake()->image('testModified.jpg');

        $rewardData = Reward::find(1);
        
        $rewardData->reward = $rewardData->reward . " Updated";
        $rewardData->pointvalue = 100;
        $rewardData->file = $file;

        // User is generated by the seeder
        $user = User::find(1);
        
        $response = $this->actingAs($user)->putJson('/api/rewards/' . $rewardData->id, $rewardData->toArray());

        $response->assertStatus(200);
    }
}
